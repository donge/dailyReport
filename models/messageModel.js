// Generated by CoffeeScript 1.10.0
(function() {
  var Response, utils;

  Response = require('../vo/Response').Response;

  utils = require("../utils");

  exports.createMessage = function(senderId, receiverId, messageTxt, callback) {
    var client;
    client = utils.createClient();
    return client.incr("next_message_id", function(err, messageId) {
      var score;
      if (err) {
        return utils.showDBError(callback, client);
      }
      score = messageId;
      return client.zadd("userid:" + receiverId + ":messageIds", score, messageId, function(err, reply) {
        if (err) {
          return utils.showDBError(callback, client);
        }
        return client.hmset("userid:" + receiverId + ":messages", messageId + ":sender", senderId, messageId + ":message", messageTxt, messageId + ":time", Date(), function(err, reply) {
          if (err) {
            return utils.showDBError(callback, client);
          }
          client.quit();
          return callback(new Response(1, 'success', reply));
        });
      });
    });
  };

  exports.deleteMessage = function(receiverId, messageId, callback) {
    var client;
    client = utils.createClient();
    return client.zrem("userid:" + receiverId + ":messageIds", messageId, function(err, reply) {
      if (err) {
        return utils.showDBError(callback, client);
      }
      return client.hdel("userid:" + receiverId + ":messages", messageId + ":sender", messageId + ":message", messageId + ":time", function(err, reply) {
        if (err) {
          return utils.showDBError(callback, client);
        }
        client.quit();
        return callback(new Response(1, 'success', reply));
      });
    });
  };

  exports.getMessages = function(receiverId, callback) {
    var client, userId;
    userId = receiverId;
    client = utils.createClient();
    return client.zrevrange("userid:" + userId + ":messageIds", 0, -1, function(err, messageIds) {
      var j, len1, messageArgs, messageId, senderArgs, timeArgs;
      if (err) {
        return utils.showDBError(callback, client);
      }
      if (messageIds && messageIds.length === 0) {
        return callback(new Response(1, 'success', []));
      }
      messageArgs = ["userid:" + userId + ":messages"];
      timeArgs = ["userid:" + userId + ":messages"];
      senderArgs = ["userid:" + userId + ":messages"];
      for (j = 0, len1 = messageIds.length; j < len1; j++) {
        messageId = messageIds[j];
        messageArgs.push(messageId + ":message");
        timeArgs.push(messageId + ":time");
        senderArgs.push(messageId + ":sender");
      }
      return client.hmget(messageArgs, function(err, messages) {
        if (err) {
          return utils.showDBError(callback, client);
        }
        return client.hmget(timeArgs, function(err, times) {
          if (err) {
            return utils.showDBError(callback, client);
          }
          return client.hmget(senderArgs, function(err, senders) {
            var i, k, len, ref, response;
            if (err) {
              return utils.showDBError(callback, client);
            }
            len = messages.length;
            response = [];
            for (i = k = 0, ref = len; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
              response.push({
                id: messageIds[i],
                time: times[i],
                sender: senders[i],
                message: messages[i]
              });
            }
            client.quit();
            return callback(new Response(1, 'success', response));
          });
        });
      });
    });
  };

}).call(this);
